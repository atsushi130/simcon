#!/usr/bin/env ruby

require 'singleton'

def log message
  puts "===> #{message}".green
end

def error massage
  puts massage.red
  exit 1
end

class String
  def colorize color_code
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red() colorize 31 end
  def green() colorize 32 end
end

class Configuration

  include Singleton
  attr_reader :configuration

  def initialize
    configuration = ARGV[0]
    case configuration
    when "Development", "development", "Debug", "debug" then
      @configuration = "Debug"
    when "Staging", "staging" then
      @configuration = "Staging"
    when "Production", "production" then
      @configuration = "Production"
    end
  end
end

class Simcon

  attr_reader :simulator
  attr_reader :app

  def initialize
    simulators = `xcrun simctl list`.split("\n")
    available_simulators = simulators
        .select { |simulator| simulator.start_with?("    iPhone") }
        .map { |simulator| Simulator.new(simulator) }
    booted_simulator = available_simulators
        .select { |simulator|
          simulator.status == "Booted"
        }
        .first

    @simulator = booted_simulator.nil? ? available_simulators.first : booted_simulator
    @app = App.new("app name")
  end
end


class Simulator

  attr_reader :name
  attr_reader :uuid
  attr_reader :status

  def initialize simulator
    /    iPhone (.*) \((.*)\) \((.*)\)/ =~ simulator
    @name   = "iPhone #{$1}"
    @uuid   = $2
    @status = $3
  end

  def reinstall app
    self.uninstall app
    `wait`
    self.install app
  end

  def install app
    `xcrun simctl install #{@uuid} #{app.path} > /dev/null 2>&1`
    error 'failed install' if $?.exitstatus == 1
  end

  def uninstall app
    `xcrun simctl uninstall #{@uuid} #{app.bundle_identifier} > /dev/null 2>&1`
    error 'failed uninstall' if $?.exitstatus == 1
  end

  def launch app
    `xcrun simctl launch --console #{@uuid} #{app.bundle_identifier} > /dev/null 2>&1`
    error 'failed launch' if $?.exitstatus == 1
  end

  def documents
    app_uuid = `ls -lt ~/Library/Developer/CoreSimulator/Devices/#{@uuid}/data/Containers/Data/Application | awk 'NR == 2 {print $9}'`
    "~/Library/Developer/CoreSimulator/Devices/#{@uuid}/data/Containers/Data/Application/#{app_uuid}/Documents".gsub(/\n/, "")
  end
end


class App

  def initialize app
    @app = app
  end

  def path
    app_dir = `ls ~/Library/Developer/Xcode/DerivedData/ | grep #{@app}`.gsub(/\n/, "")
    build_dir_path = "~/Library/Developer/Xcode/DerivedData/#{app_dir}/Build/Products"
    app = `ls #{build_dir_path} | grep #{Configuration.instance.configuration} | grep iphonesimulator`.gsub(/\n/, "")
    "#{build_dir_path}/#{app}/#{@app}.app"
  end

  def bundle_identifier
    case Configuration.instance.configuration
    when "Debug" then
      "development bundle identifier"
    when "Staging" then
      "staging bundle identifier"
    when "Production" then
      "production bundle identifier"
    end
  end

  def build
    `xcodebuild -workspace #{@app}.xcworkspace -scheme #{@app} -configuration #{Configuration.instance.configuration} -sdk iphonesimulator > /dev/null 2>&1`
    error 'failed build' if $?.exitstatus == 1
  end
end

